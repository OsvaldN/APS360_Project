# -*- coding: utf-8 -*-
"""t_SNE.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u9VjYR-LMEQt57occ6VxnNzpJPAfXDEf
"""

import numpy as np
import time
import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
import torchvision
from torch.utils.data.sampler import SubsetRandomSampler
import torchvision.transforms as transforms
import matplotlib.pyplot as plt
import matplotlib.pyplot as plt
from sklearn.manifold import TSNE
from sklearn.decomposition import TruncatedSVD

#!pip install -U scikit-learn

"""
function: get_face_data
put all face_data in a single batch
"""
def get_face_data():
  transform = transforms.ToTensor()
  dataset = torchvision.datasets.ImageFolder(root='./face_data', transform=transform)
  dataset = torch.utils.data.DataLoader(dataset, batch_size=len(dataset), num_workers=1, shuffle=True)
  return dataset

"""
function: plot_t_SNE_Embeddings
input: trained generator model
get the low-dimensional embeddings from the model and convert them to 2D distribution of embeddings 
"""
def plot_t_SNE_Embeddings(model):
  dataset = get_face_data()
  embeddings = torch.tensor([])
  # only one batch
  for data, _ in  dataset:
    data = data.cuda()
    embeddings = model.encoder(data)
    embeddings = embeddings.view(len(embeddings), -1)   
  
  # use PCA to reduce dimensionality to 50
  embeddings = embeddings.detach().cpu().numpy()
  emb_pca = TruncatedSVD(n_components=50).fit_transform(embeddings)
  # convert embeddings to 2D
  emb_t_sne = TSNE(n_components=2).fit_transform(emb_pca)
  # plot embeddings
  plot_embedding(emb_pca)
  

"""
function: plot_embedding
input: 2D distribution of embeddings
plot all the embeddings in a graph 
"""
def plot_embedding(X, title=None):
  #x_min, x_max = np.min(X, 0), np.max(X, 0)
  #X = (X - x_min) / (x_max - x_min)

  plt.figure()
  for i in range(X.shape[0]):
      plt.plot(X[i, 0], X[i, 1], 'bo', markersize=0.3)
  if title is not None:
      plt.title(title)
